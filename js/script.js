console.log('it works');
import { generateRandom } from './utils';
import { modeTest } from './dataPattern.js';
// TODO: conditional import
import { gameRBG, gameHSL } from './games.js';
// TODO: logic to have the mode and game selected

const gameBoard = document.querySelector('.game-board');
const gameForm = document.createElement('form');
let game;

function generateInputsHTML(inputsArray) {
  return inputsArray
    .map(({ name, maxValue, valueType }) => {
      return `
      <div class="input__parent">
        <label name=${name}>${name}</label>
        <input class="input--color" type=${valueType} name=${name} value=${generateRandom(
        255
      )} required max=${maxValue}/>
      <span class="message-for-${name}" ></span>
      </div>
      `;
    })
    .join('');
}

function handleSubmit(e) {
  e.preventDefault();
  console.dir(e);
  const inputs = e.target.elements;
  // get the colors given by the player
  const valuesPlayer = game.nameProperties.reduce((acc, curr) => {
    return { ...acc, [curr]: inputs[curr].value };
  }, {});
  const colorGeneratedByPlayerString = game.formatColor(valuesPlayer);
  const playerColorBloc = document.querySelector('.bloc-player-color');
  // add background color generated by the player
  playerColorBloc.style.background = colorGeneratedByPlayerString;
  // evaluateAnswer
}

function setForm() {
  gameForm.classList.add(`game-form`, `game-form--${game.name}`);
  gameForm.setAttribute('autocomplete', 'off');

  const inputsToCreate = generateInputsHTML(game.UI.inputs);
  const validateInput = `<input value=submit type="submit"/>`;
  document.body.style.background = game.colorToFind.string;
  const allHTML = inputsToCreate + validateInput;

  gameForm.innerHTML = allHTML;
}

function setTheBoard() {
  const titleHTMl = `<h2 class="game__title">${game.UI.title}</h2>`;
  const playerColorBloc = `<div class="bloc-player-color"><span>color you've created</span></div>`;
  gameBoard.innerHTML = titleHTMl + playerColorBloc;
  gameBoard.insertAdjacentElement('beforeend', gameForm);
  setForm();
  gameBoard.hidden = false;
}

function gameLifeCycle() {
  gameForm.addEventListener('submit', handleSubmit);
}
function prepareGame(gameSelected, modeSelected) {
  game = {
    ...gameSelected,
    mode: { ...modeSelected },
  };
  // generate color
  game.colorToFind = game.generateColor();
  // set the board
  setTheBoard();
  gameLifeCycle();
}

// display message

/* finish the game
 * display message + score
 * save in LS
 */

// TODO: START When the player has selected the game + its mode
prepareGame(gameRBG, modeTest);
// prepareGame(gameHSL, modeTest);
